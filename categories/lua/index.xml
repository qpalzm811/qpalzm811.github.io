<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lua on qpalzm811 blog</title>
    <link>https://qpalzm811.github.io/categories/lua/</link>
    <description>Recent content in lua on qpalzm811 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 19 Aug 2022 09:21:31 +0800</lastBuildDate><atom:link href="https://qpalzm811.github.io/categories/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity入门精要笔记</title>
      <link>https://qpalzm811.github.io/post/unityshader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81/unityshader/</link>
      <pubDate>Fri, 19 Aug 2022 09:21:31 +0800</pubDate>
      
      <guid>https://qpalzm811.github.io/post/unityshader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81/unityshader/</guid>
      <description>高清彩图](https://blog.csdn.net/Raymond_King123/article/details/115661077)
第三章 Unityshader基础 3.1 unity shader概述 3.1.3 unity 中的shader unity shader与之前提及的渲染管线的shader很大不同。
Unity提供了四种模板
 Standard Surface Shader：产生一个包含 标准光照模型，使用unity5新加的基于物理的渲染方法 的 表面着色器模板。 Unlit Shader：产生不包含 光照 （但包含雾效）的基本 顶点 片元着色器 Image Effect Shader：实现各种屏幕后处理效果 基本模板 Computer Shader：特殊shader，用GPU进行常规渲染流水线无关的计算（本书不讨论）  Unity Shader必须和材质Material结合起来
3.2 Unity Shader的基础ShaderLab  ShaderLab是Unity提供的Unity Shader说明性语言 使用嵌套在花括号内部的语义（Syntax）没教书Unity Shader文件的结构 会根据使用的平台将这些结构，编译成真正的代码和Shader文件。  Shader &amp;quot;ShaderName&amp;quot;{Properties{//属性}SubShader{//显卡A使用的子着色器}SubShader{//显卡A使用的子着色器}}3.3 UnityShader的结构 3.3.2 材质 Material 和 UnityShader的桥梁：Properties ShaderLab: defining material properties
   Type Example syntax Comment     Integer _ExampleName (&amp;quot;Integer display name&amp;quot;, Integer) = 1 真正的整形Integer，不像Int是用浮点实现的。为了兼容性可以使用Int   Int (legacy) _ExampleName (&amp;quot;Int display name&amp;quot;, Int) = 1 只是为了兼容性，浮点实现。若整形用Integer   Float  _ExampleName (&amp;quot;Float display name&amp;quot;, Float) = 0.</description>
    </item>
    
    <item>
      <title>Lua基础知识</title>
      <link>https://qpalzm811.github.io/post/lua%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 19 Aug 2022 04:21:31 +0800</pubDate>
      
      <guid>https://qpalzm811.github.io/post/lua%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Lua基礎知識 1. Lua的底层数据类型   常用的数据类型包括：
 nil boolean number string function userdata thread table    //Lua源碼中的數據類型宏定義 //file: lua.h /* ** basic types */ #define LUA_TNONE	(-1)  #define LUA_TNIL	0 #define LUA_TBOOLEAN	1 #define LUA_TLIGHTUSERDATA	2 #define LUA_TNUMBER	3 #define LUA_TSTRING	4 #define LUA_TTABLE	5 #define LUA_TFUNCTION	6 #define LUA_TUSERDATA	7 #define LUA_TTHREAD	8  #define LUA_NUMTYPES	9   当中没有被包括在常用类型的basic types为：
 None LightUserData NumTypes     2.</description>
    </item>
    
    <item>
      <title>Lua性能测试</title>
      <link>https://qpalzm811.github.io/post/lua%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 19 Aug 2022 04:17:41 +0800</pubDate>
      
      <guid>https://qpalzm811.github.io/post/lua%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
      <description>性能測試 1. Lua和C# 循环产生内存垃圾   使用profiler查看循环产生内存垃圾对性能的影响（CPU Usage）
  Lua方面，使用toLua进行测试
  测试规则：
  启动测试后，脚本会在每帧生成数量（初始为100个）的SpawnObj，该生成量每秒增加（默认为100个）个；测试共120次增量——时间大约为2分钟，最后一帧的生成量为12000
  C#
  public class UnitySpawnTest : MonoBehaviour { bool isStop = true; [SerializeField] int currSpawnCntPerFrame = 0; [SerializeField] int spawnCntIncreaseVal = 1; //每幀new的數量 [SerializeField] int stepUpConfig = 60; //多少次循環增加一次壓力 [SerializeField] int stepCounter = 0; //循環計數器 [SerializeField] int limitStep = 120; //2分鐘後觀察 [SerializeField] int limitCounter = 0; private void Start() { currSpawnCntPerFrame = spawnCntIncreaseVal; stepCounter = 0; StartCoroutine(&amp;#34;CreatingGO&amp;#34;); } private void Update() { if (Input.</description>
    </item>
    
  </channel>
</rss>
